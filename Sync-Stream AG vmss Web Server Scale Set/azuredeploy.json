{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
	"parameters": {
		"adminUsername": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"defaulatvalue": "vmssactual",
				"description": "Username for the Virtual Machine."
			}
		},
		"adminPassword": {
			"defaulatvalue": "vm$$admin2018!",
			"metadata": {
				"description": "Password for the Virtual Machine."
			},
			"type": "securestring"
		},
		"windowsOSVersion": {
			"type": "string",
			"defaultValue": "2016-Datacenter",

			"metadata": {
				"description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."
			}
		},
		"virtualMachineSize": {
			"type": "string",
			"defaultValue": "Standard_A2",
			"allowedValues": [
				"Standard_A1",
				"Standard_A2",
				"Standard_A3",
				"Standard_D1_v2",
				"Standard_D2_v2",
				"Standard_D3_v2"
			],
			"metadata": {
				"description": "The virtual machine size. Allowed values: Standard_A1, Standard_A2, Standard_A3, Standard_D1_v2, Standard_D2_v2."
			}
		},
		"applicationGatewaySize": {
			"type": "string",
			"allowedValues": [
				"WAF_Medium",
				"WAF_Large"
			],
			"defaultValue": "WAF_Medium",
			"metadata": {
				"description": "Application Gateway size"
			}
		},
		"capacity": {
			"type": "int",
			"allowedValues": [
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10
			],
			"defaultValue": 2,
			"metadata": {
				"description": "Number of instances"
			}
		},
		"wafMode": {
			"type": "string",
			"allowedValues": [
				"Detection",
				"Prevention"
			],
			"defaultValue": "Detection",
			"metadata": {
				"description": "WAF Mode"
			}
		},
		"frontendCertData": {
			"type": "string",
			"metadata": {
				"description": "Base-64 encoded form of the .pfx file. This is the cert terminating on the Application Gateway."
			}
		},
		"frontendCertPassword": {
			"type": "securestring",
			"metadata": {
				"description": "Password for .pfx certificate"
			}
		},
		"backendCertData": {
			"type": "string",
			"metadata": {
				"description": "Base-64 encoded form of the .pfx file. This is the cert installed on the web servers."
			}
		},
		"backendCertPassword": {
			"type": "securestring",
			"metadata": {
				"description": "Password for .pfx certificate"
			}
		},
		"backendPublicKeyData": {
			"type": "string",
			"metadata": {
				"description": "Base-64 encoded form of the .cer file. This is the public key for the cert on the web servers."
			}
		},
		"backendCertDnsName": {
			"type": "string",
			"metadata": {
				"description": "DNS name of the backend cert"
			}
		},
		"_artifactsLocation": {
			"type": "string",
			"metadata": {
				"description": "The base URI where artifacts required by this template are located. For example, if stored on a public GitHub repo, you'd use the following URI: https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/201-vmss-windows-webapp-dsc-autoscale."
			},
			"defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/201-application-gateway-2vms-iis-ssl"
		},
		"_artifactsLocationSasToken": {
			"type": "securestring",
			"defaultValue": "",
			"metadata": {
				"description": "The sasToken required to access _artifactsLocation.  If your artifacts are stored on a public repo or public storage account you can leave this blank."
			}
		},
		"location": {
			"type": "string",
			"defaultValue": "[resourceGroup().location]",
			"metadata": {
				"description": "Location for all resources."
			}
		},
		"ssagjb001Type": {
			"type": "string",
			"defaultValue": "Standard_LRS",
			"allowedValues": [
				"Standard_LRS",
				"Standard_ZRS",
				"Standard_GRS",
				"Standard_RAGRS",
				"Premium_LRS"
			]
		},
		"ssAgJb001Name": {
			"type": "string",
			"minLength": 1
		},
		"ssAgJb001AdminUserName": {
			"defaultValue": "ssagvmssadmin",
			"type": "string",
			"minLength": 1
		},
		"SS-AG-JB-001AdminPassword": {
			"type": "securestring"
		},
		"SS-AG-JB-001WindowsOSVersion": {
			"type": "string",
			"defaultValue": "2016-Datacenter",
			"allowedValues": [
				"2016-Datacenter"
			]
		}
	},
	"variables": {
		"imagePublisher": "MicrosoftWindowsServer",
		"imageOffer": "WindowsServer",
		"vm1NicName": "vm1Nic",
		"vm2NicName": "vm2Nic",
		"addressPrefix": "10.5.0.0/16",
		"webSubnetName": "ssAgIisSubNet001",
		"webSubnetPrefix": "10.5.2.0/24",
		"appGatewaySubnetName": "ssAgSubNet001",
		"appGatewaySubnetPrefix": "10.5.1.0/24",
		"vm1PublicIPAddressName": "vmss001PublicIP",
		"vm1PublicIPAddressType": "Dynamic",
		"vm2PublicIPAddressName": "vmss002PublicIP",
		"vm2PublicIPAddressType": "Dynamic",
		"vm1IpAddress": "10.5.2.4",
		"vm2IpAddress": "10.5.2.5",
		"vm1Name": "iisvmss001",
		"vm2Name": "iisvmss002",
		"vmSize": "[parameters('virtualMachineSize')]",
		"virtualNetworkName": "ssAgVNet001",
		"webSubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('webSubnetName'))]",
		"webAvailabilitySetName": "IisAvailabilitySet",
		"webNsgName": "ssVmssNsg",
		"appGwNsgName": "ssAgNsg",
		"applicationGatewayName": "ssAgActual001",
		"appGwPublicIpName": "ssAgPublicIp",
		"appGatewaySubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('appGatewaySubnetName'))]",
		"appGwPublicIPRef": "[resourceId('Microsoft.Network/publicIPAddresses',variables('appGwPublicIpName'))]",
		"wafEnabled": true,
		"wafMode": "[parameters('wafMode')]",
		"wafRuleSetType": "OWASP",
		"wafRuleSetVersion": "3.0",
		"applicationGatewayID": "[resourceId('Microsoft.Network/applicationGateways',variables('applicationGatewayName'))]",
		"dscZipFullPath": "[concat(parameters('_artifactsLocation'), '/DSC/iisInstall.ps1.zip', parameters('_artifactsLocationSasToken'))]",
		"webConfigFullPath": "[concat(parameters('_artifactsLocation'), '/artifacts/web.config', parameters('_artifactsLocationSasToken'))]",
		"vm1DefaultHtmFullPath": "[concat(parameters('_artifactsLocation'), '/artifacts/vm1.default.htm', parameters('_artifactsLocationSasToken'))]",
		"vm2DefaultHtmFullPath": "[concat(parameters('_artifactsLocation'), '/artifacts/vm2.default.htm', parameters('_artifactsLocationSasToken'))]",
		"Updates and Upgrades vmss script for Sync-StreamTemplateFolder": "nestedtemplates",
		"Updates and Upgrades vmss script for Sync-StreamTemplateFileName": "Updates and Upgrades vmss script for Sync-Stream.json",
		"Updates and Upgrades vmss script for Sync-StreamTemplateParametersFileName": "Updates and Upgrades vmss script for Sync-Stream.parameters.json",
		"ssagjb001Name": "[concat('ssagjb001', uniqueString(resourceGroup().id))]",
		"ssAgMgtSNet001Prefix": "10.8.0.0/16",
		"ssAgMgtSNet001Name": "ssMgt001",
		"ssAgMgtSNet001Prefix": "10.5.0.0/24",
		"ssAgMgtSNet0012Name": "ssMgt002",
		"ssAgMgtSNet001Prefix": "10.5.1.0/24",
		"JumpBoxImagePublisher": "MicrosoftWindowsServer",
		"JumpBoxImageOffer": "WindowsServer",
		"ssAgJB001OSDiskName": "ssAgJbOSDisc",
		"ssAgJB001VmSize": "Standard_A2",
		"ssAgJB001VnetID": "[resourceId('Microsoft.Network/virtualNetworks', 'ssAgMgtSNet001')]",
		"ssAgJB001SubnetRef": "[concat(variables('ssAgJB001VnetID'), '/subnets/', variables('ssAgMgtSNet001Name'))]",
		"ssAgJB001StorageAccountContainerName": "vhds",
		"ssAgJB001NicName": "[concat(parameters('ssagjb001Name'), 'NetworkInterface')]",
	},
  "resources": [
    {
      "comments": "Availability set for the web servers",
      "type": "Microsoft.Compute/availabilitySets",
      "sku": {
        "name": "Aligned"
      },
      "name": "[variables('webAvailabilitySetName')]",
      "apiVersion": "2016-04-30-preview",
      "location": "[parameters('location')]",
      "properties": {
        "platformUpdateDomainCount": 5,
        "platformFaultDomainCount": 2,
        "virtualMachines": [
          {
            "id": "[resourceId('Microsoft.Compute/virtualMachines', variables('vm1Name'))]"
          },
          {
            "id": "[resourceId('Microsoft.Compute/virtualMachines', variables('vm2Name'))]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vm1Name'))]",
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vm2Name'))]"
      ]
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('vm1PublicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "[variables('vm1PublicIPAddressType')]"
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('vm2PublicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "[variables('vm2PublicIPAddressType')]"
      }
    },
    {
      "apiVersion": "2017-03-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('appGwPublicIpName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('webNsgName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "Allow80",
            "properties": {
              "description": "Allow 80 from local VNet",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "Allow443",
            "properties": {
              "description": "Allow 443 from local VNet",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 101,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowRDP",
            "properties": {
              "description": "Allow RDP from everywhere",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3389",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 102,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('appGwNsgName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "Allow80",
            "properties": {
              "description": "Allow 80 from Internet",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "Allow443",
            "properties": {
              "description": "Allow 443 from Internet",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 102,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowAppGwProbes",
            "properties": {
              "description": "Allow ports for App Gw probes",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "65503-65534 ",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 103,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2017-09-01",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('webNsgName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('appGwNsgName'))]"
      ],
      "location": "[parameters('location')]",
      "name": "[variables('virtualNetworkName')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('webSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('webSubnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('webNsgName'))]"
              }
            }
          },
          {
            "name": "[variables('appGatewaySubnetName')]",
            "properties": {
              "addressPrefix": "[variables('appGatewaySubnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('appGwNsgName'))]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/virtualNetworks"
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('vm1NicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses/', variables('vm1PublicIPAddressName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfigVm1",
            "properties": {
              "privateIPAddress": "[variables('vm1IpAddress')]",
              "privateIPAllocationMethod": "Static",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('vm1PublicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('webSubnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('vm2NicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses/', variables('vm2PublicIPAddressName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfigVm2",
            "properties": {
              "privateIPAddress": "[variables('vm2IpAddress')]",
              "privateIPAllocationMethod": "Static",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('vm2PublicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('webSubnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-04-30-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vm1Name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('vm1NicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vm1Name')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('windowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[variables('vm1Name')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vm1NicName'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "name": "Microsoft.Powershell.DSC",
          "type": "extensions",
          "location": "[parameters('location')]",
          "apiVersion": "2016-04-30-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', variables('vm1Name'))]"
          ],
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.9",
            "autoUpgradeMinorVersion": true,
            "forceUpdateTag": "1.0",
            "settings": {
              "configuration": {
                "url": "[variables('dscZipFullPath')]",
                "script": "iisInstall.ps1",
                "function": "InstallIIS"
              },
              "configurationArguments": {
                "nodeName": "[variables('vm1Name')]",
                "vmNumber": "vm1",
                "backendCert": "[parameters('backendCertData')]",
                "backendCertPw": "[parameters('backendCertPassword')]",
                "backendCertDnsName": "[parameters('backendCertDnsName')]",
                "webConfigPath": "[variables('webConfigFullPath')]",
                "defaultHtmPath": "[variables('vm1DefaultHtmFullPath')]"
              }
            },
            "protectedSettings": {}
          }
        }
      ]
    },
    {
      "apiVersion": "2016-04-30-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vm2Name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('vm2NicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vm2Name')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('windowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[variables('vm2Name')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vm2NicName'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "name": "Microsoft.Powershell.DSC",
          "type": "extensions",
          "location": "[parameters('location')]",
          "apiVersion": "2016-04-30-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', variables('vm2Name'))]"
          ],
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.9",
            "autoUpgradeMinorVersion": true,
            "forceUpdateTag": "1.0",
            "extensionsettings": {
              "configuration": {
                "url": "[variables('dscZipFullPath')]",
                "script": "iisInstall.ps1",
                "function": "InstallIIS"
              },
              "configurationArguments": {
                "nodeName": "[variables('vm2Name')]",
                "vmNumber": "vm2",
                "backendCert": "[parameters('backendCertData')]",
                "backendCertPw": "[parameters('backendCertPassword')]",
                "backendCertDnsName": "[parameters('backendCertDnsName')]",
                "webConfigPath": "[variables('webConfigFullPath')]",
                "defaultHtmPath": "[variables('vm2DefaultHtmFullPath')]"
              }
            },
            "protectedSettings": {}
          }
        }
      ]
    },
    {
      "apiVersion": "2017-06-01",
      "name": "[variables('applicationGatewayName')]",
      "type": "Microsoft.Network/applicationGateways",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[resourceId('Microsoft.Network/publicIPAddresses/', variables('appGwPublicIpName'))]"
      ],
      "properties": {
        "sku": {
          "name": "[parameters('applicationGatewaySize')]",
          "tier": "WAF",
          "capacity": "[parameters('capacity')]"
        },
        "sslCertificates": [
          {
            "name": "appGatewayFrontEndSslCert",
            "properties": {
              "data": "[parameters('frontendCertData')]",
              "password": "[parameters('frontendCertPassword')]"
            }
          }
        ],
        "gatewayIPConfigurations": [
          {
            "name": "appGatewayIpConfig",
            "properties": {
              "subnet": {
                "id": "[variables('appGatewaySubnetRef')]"
              }
            }
          }
        ],
        "authenticationCertificates": [
          {
            "properties": {
              "data": "[parameters('backendPublicKeyData')]"
            },
            "name": "appGatewayBackendCert"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGatewayFrontendIP",
            "properties": {
              "PublicIPAddress": {
                "id": "[variables('appGwPublicIPRef')]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "appGatewayFrontendPort80",
            "properties": {
              "Port": 80
            }
          },
          {
            "name": "appGatewayFrontendPort443",
            "properties": {
              "Port": 443
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "appGatewayBackendPool",
            "properties": {
              "BackendAddresses": [
                {
                  "IpAddress": "[variables('vm1IpAddress')]"
                },
                {
                  "IpAddress": "[variables('vm2IpAddress')]"
                }
              ]
            }
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "appGatewayBackendHttpSettings",
            "properties": {
              "Port": 80,
              "Protocol": "Http",
              "CookieBasedAffinity": "Disabled"
            }
          },
          {
            "name": "appGatewayBackendHttpsSettings",
            "properties": {
              "Port": 443,
              "Protocol": "Https",
              "CookieBasedAffinity": "Disabled",
              "AuthenticationCertificates": [
                {
                  "Id": "[concat(variables('applicationGatewayID'), '/authenticationCertificates/appGatewayBackendCert')]"
                }
              ]
            }
          }
        ],
        "httpListeners": [
          {
            "name": "appGatewayHttpListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/appGatewayFrontendIP')]"
              },
              "FrontendPort": {
                "Id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPort80')]"
              },
              "Protocol": "Http",
              "SslCertificate": null
            }
          },
          {
            "name": "appGatewayHttpsListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/appGatewayFrontendIP')]"
              },
              "FrontendPort": {
                "Id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPort443')]"
              },
              "Protocol": "Https",
              "SslCertificate": {
                "Id": "[concat(variables('applicationGatewayID'), '/sslCertificates/appGatewayFrontEndSslCert')]"
              }
            }
          }
        ],
        "requestRoutingRules": [
          {
            "Name": "HTTPRule",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/appGatewayHttpListener')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('applicationGatewayID'), '/backendAddressPools/appGatewayBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/appGatewayBackendHttpSettings')]"
              }
            }
          },
          {
            "Name": "HTTPSRule",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/appGatewayHttpsListener')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('applicationGatewayID'), '/backendAddressPools/appGatewayBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/appGatewayBackendHttpsSettings')]"
              }
            }
          }
        ],
        "webApplicationFirewallConfiguration": {
          "enabled": "[variables('wafEnabled')]",
          "firewallMode": "[variables('wafMode')]",
          "ruleSetType": "[variables('wafRuleSetType')]",
          "ruleSetVersion": "[variables('wafRuleSetVersion')]",
          "disabledRuleGroups": []
        }
      }
    },
    {
      "name": "Updates and Upgrades vmss script for Sync-Stream",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-09-01",
      "dependsOn": [ ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/', variables('Updates and Upgrades vmss script for Sync-StreamTemplateFolder'), '/', variables('Updates and Upgrades vmss script for Sync-StreamTemplateFileName'), parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parametersLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/', variables('Updates and Upgrades vmss script for Sync-StreamTemplateFolder'), '/', variables('Updates and Upgrades vmss script for Sync-StreamTemplateParametersFileName'), parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        }
      }
    },
    {
      "name": "[variables('ssagjb001Name')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-01-01",
      "sku": {
        "name": "[parameters('ssagjb001Type')]"
      },
      "dependsOn": [ ],
      "tags": {
        "displayName": "ssagjb001"
      },
      "kind": "Storage"
    },
    {
      "name": "ssAgMgtSNet001",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-03-30",
      "dependsOn": [ ],
      "tags": {
        "displayName": "ssAgMgtSNet001"
      },
      "properties": {
        "addressSpace": {
									"addressPrefixes": [
										"[variables('ssAgMgtSNet001Prefix')]"
									]
        },
        "subnets": [
									{
										"name": "[variables('ssAgMgtSNet001Name')]",
										"properties": {
											"addressPrefix": "[variables('ssAgMgtSNet001Prefix')]"
										}
									}
						]
       
      }
    },
    {
],
			"outputs": {}

				

